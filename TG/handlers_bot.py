import asyncio

from aiogram import F, Router
from aiogram.client.session import aiohttp

from aiogram.filters import CommandStart, StateFilter

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ForceReply, InputFile, FSInputFile
from loguru import logger
from openpyxl.workbook import Workbook

from TG.StatesGroup import AddTokenState
from TG.auth import generate_key, encrypt_token, decrypt_token
from TG.bot import bot
from TG.funcs_tg import parse_statistics, create_xlsx_report, get_user_id
from TG.keyboards.ReplyKeyboard import get_main_menu_keyboard
from database.db import get_db, async_session
from database.func_db import UserCRUD
from database.models import Token

router = Router()

user_messages = {}
"""
–ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
"""


async def fetch_user_tokens(user_id):
    async with async_session() as session:
        user_crud = UserCRUD(session)
        tokens = await user_crud.get_user_tokens(user_id)
    return tokens


async def delete_user_messages(user_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è user_messages.
    """
    if user_id in user_messages:
        for message_id in user_messages[user_id]:
            try:
                await bot.delete_message(chat_id=user_id, message_id=message_id)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

        # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        user_messages[user_id] = [msg_id for msg_id in user_messages[user_id] if msg_id not in user_messages.get('keyboard_message_ids', [])]

@router.message(CommandStart())
async def command_start_handler(message: Message):
    async with async_session() as session:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_crud = UserCRUD(session)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_crud.get_user_by_telegram_id(message.from_user.id)

        if user is None:
            # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await user_crud.create_user(
                telegram_id=message.from_user.id,
                chat_id=message.chat.id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id
                name=message.from_user.full_name
            )
            welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω."
        else:
            welcome_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    welcome_msg = await message.answer(welcome_message)
    keyboard_msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=get_main_menu_keyboard())


@router.message(lambda message: message.text == '‚ÑπÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω')
async def add_token_handler(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_messages.setdefault(message.from_user.id, []).append(message.message_id)

    sent_message = await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω:")
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    user_messages.setdefault(message.from_user.id, []).append(sent_message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    await state.set_state(AddTokenState.waiting_for_token)


@router.message(AddTokenState.waiting_for_token)
async def receive_token_handler(message: Message, state: FSMContext):
    token = message.text  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_messages.setdefault(message.from_user.id, []).append(message.message_id)

    async with async_session() as session:  # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_crud = UserCRUD(session)

        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
            key = generate_key()
            encrypted_token = encrypt_token(key, token)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –ë–î —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ save_token
            await user_crud.save_token(
                telegram_id=message.from_user.id,
                token=encrypted_token,
                key=key
            )

            sent_message = await message.answer("–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω!")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            user_messages.setdefault(message.from_user.id, []).append(sent_message.message_id)

            # –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π
            await asyncio.sleep(3)

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫—Ä–æ–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await delete_user_messages(message.from_user.id)

        except ValueError as e:
            await message.answer(str(e))  # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞.")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
    await state.clear()


@router.message(lambda message: message.text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
async def show_statistics_handler(message: Message):
    await message.answer("–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")

    async with async_session() as session:
        user_crud = UserCRUD(session)
        tokens = await user_crud.get_user_tokens(message.from_user.id)

    if not tokens:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    async with aiohttp.ClientSession() as session:
        decrypted_token = decrypt_token(tokens[0][1], tokens[0][0])
        print(decrypted_token)
        user_id = await get_user_id(session, decrypted_token)
        print(user_id)
        all_stats = await parse_statistics(session, tokens, user_id)

        if not all_stats:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ XLSX —Ñ–∞–π–ª–∞
        file_path = "statistics_report.xlsx"
        workbook = create_xlsx_report(all_stats, file_path)


        print(f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ –ø—É—Ç–∏: {file_path}")

        input_file = FSInputFile("statistics_report.xlsx")
        await message.answer_document(input_file)

    await message.answer("–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")


